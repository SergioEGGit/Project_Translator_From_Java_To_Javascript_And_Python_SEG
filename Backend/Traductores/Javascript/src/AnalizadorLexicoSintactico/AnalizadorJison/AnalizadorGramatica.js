/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var AnalizadorGramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,9],$V2=[1,15],$V3=[1,19],$V4=[1,14],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,20],$V9=[1,11],$Va=[1,12],$Vb=[2,5,38,44,49,53,87,88,89,90,91,92],$Vc=[1,23],$Vd=[1,27],$Ve=[2,5,33,38,40,44,49,53,56,59,60,61,64,65,66,87,88,89,90,91,92,96],$Vf=[2,5,33,38,40,44,49,53,56,59,60,61,63,64,65,66,87,88,89,90,91,92,96],$Vg=[1,37],$Vh=[53,54],$Vi=[1,55],$Vj=[1,51],$Vk=[1,48],$Vl=[1,49],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[2,5,33,38,40,44,49,53,87,88,89,90,91,92],$Vq=[1,66],$Vr=[1,67],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[44,53,54,67,68,69,70,72,73,74,75,76,77,78,79,80],$VH=[2,33,38,40,44,49,53,87,88,89,90,91,92],$VI=[2,33,38,44,53,91,92],$VJ=[44,53,54,67,68,72,73,74,75,76,77,78,79],$VK=[44,53,54,67,68,69,70,72,73,74,75,76,77,78,79],$VL=[44,53,54,72,73,74,75,76,77,78,79],$VM=[44,53,54,76,77,78,79],$VN=[1,140],$VO=[44,54],$VP=[2,33,38,40,44,49,53,56,59,60,61,64,65,66,87,88,89,90,91,92,96],$VQ=[1,171],$VR=[1,174],$VS=[1,200],$VT=[1,202],$VU=[1,201],$VV=[1,199],$VW=[1,203],$VX=[1,204],$VY=[1,205],$VZ=[1,198],$V_=[2,33,40,44,49,53,56,59,60,61,64,65,66,87,88,89,90,91,92,96],$V$=[1,219],$V01=[1,259],$V11=[2,33,40,44,49,53,56,59,60,61,63,64,65,66,87,88,89,90,91,92,96];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"InicioAnalisis":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Clase":7,"Interfaz":8,"Declaracion":9,"Comentarios":10,"ErroresSintacticos":11,"InstruccionesClases":12,"InstruccionClases":13,"Funciones":14,"Asignacion":15,"InstruccionesInterfaz":16,"InstruccionInterfaz":17,"DeclaracionFunciones":18,"InstruccionesFunciones":19,"InstruccionFunciones":20,"Print":21,"If":22,"For":23,"DoWhile":24,"While":25,"SentenciasCiclos":26,"InstruccionesCiclos":27,"InstruccionCiclos":28,"InstruccionesIf":29,"InstruccionIf":30,"BloqueClases":31,"{":32,"}":33,"BloqueInterfaz":34,"BloqueFuncion":35,"BloqueCiclos":36,"BloqueIf":37,"public":38,"class":39,"Identificador":40,"interface":41,"Tipos":42,"(":43,")":44,"void":45,"ListaParametros":46,"static":47,"main":48,"String":49,"[":50,"]":51,"args":52,";":53,",":54,"Parametro":55,"for":56,"DeclaracionFor":57,"Expr":58,"while":59,"do":60,"if":61,"Else":62,"else":63,"break":64,"continue":65,"return":66,"+":67,"-":68,"*":69,"/":70,"!":71,"<=":72,">=":73,"<":74,">":75,"==":76,"!=":77,"&&":78,"||":79,"^":80,"Valores":81,"ValoresDouble":82,"ValoresString":83,"ValoresBoolean":84,".":85,"LstValores":86,"int":87,"Boolean":88,"double":89,"char":90,"Comentario_MultiLinea":91,"Comentario_UniLinea":92,"ListadoDeclaraciones":93,"Var_Value":94,"=":95,"Sout":96,"Delimitador":97,"Exp":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",32:"{",33:"}",38:"public",39:"class",40:"Identificador",41:"interface",43:"(",44:")",45:"void",47:"static",48:"main",49:"String",50:"[",51:"]",52:"args",53:";",54:",",56:"for",59:"while",60:"do",61:"if",63:"else",64:"break",65:"continue",66:"return",67:"+",68:"-",69:"*",70:"/",71:"!",72:"<=",73:">=",74:"<",75:">",76:"==",77:"!=",78:"&&",79:"||",80:"^",82:"ValoresDouble",83:"ValoresString",84:"ValoresBoolean",85:".",87:"int",88:"Boolean",89:"double",90:"char",91:"Comentario_MultiLinea",92:"Comentario_UniLinea",95:"=",96:"Sout",98:"Exp"},
productions_: [0,[3,2],[3,0],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,2],[12,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[16,2],[16,1],[17,1],[17,1],[17,1],[19,2],[19,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[27,2],[27,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[29,2],[29,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[31,3],[31,2],[31,1],[34,3],[34,2],[34,1],[35,3],[35,2],[35,1],[36,3],[36,2],[36,1],[37,3],[37,2],[37,1],[7,4],[8,4],[14,6],[14,6],[14,7],[14,7],[14,11],[18,6],[18,6],[18,7],[18,7],[46,3],[46,1],[55,2],[23,8],[25,5],[24,7],[22,6],[62,2],[62,2],[62,0],[26,2],[26,2],[26,2],[26,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,2],[58,2],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,1],[81,3],[81,1],[81,1],[81,1],[81,1],[81,5],[81,6],[81,3],[81,4],[86,3],[86,1],[42,1],[42,1],[42,1],[42,1],[42,1],[10,1],[10,1],[9,3],[57,3],[93,3],[93,1],[94,3],[94,1],[15,4],[15,6],[15,7],[15,4],[15,5],[15,4],[15,4],[21,5],[11,2],[11,1],[11,1],[97,1],[97,1],[97,1],[97,1],[97,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return []; 
break;
case 3: case 10: case 18: case 23: case 35: case 47:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4: case 11: case 19: case 24: case 36: case 48: case 86: case 127: case 138:
 this.$ = [$$[$0]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 12: case 13: case 14: case 15: case 16: case 17: case 20: case 21: case 22: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 61: case 64: case 67: case 70: case 73: case 116:
 this.$ = $$[$0]; 
break;
case 59: case 62: case 65: case 68: case 71:
 this.$ = new Bloque(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 60: case 63: case 66: case 69: case 72:
 this.$ = new Bloque(_$[$0-1].first_line, _$[$0-1].first_column, []); 
break;
case 74:
 this.$ = new Clase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], $$[$0]); 
break;
case 75:
 this.$ = new Interfaz(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], $$[$0]); 
break;
case 76: case 77:
 this.$ = new Funciones(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], [], $$[$0]); 
break;
case 78: case 79:
 this.$ = new Funciones(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 80:
 this.$ = new Funciones(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-9], $$[$0-7], [], $$[$0]); 
break;
case 81: case 82:
 this.$ = new DeclaracionFunciones(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], []); 
break;
case 83: case 84:
 this.$ = new DeclaracionFunciones(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-4], $$[$0-2]); 
break;
case 85: case 126: case 137:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 87:
 this.$ = new Parametros(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0]); 
break;
case 88:
 this.$ = new For(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 89:
 this.$ = new While(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 90:
 this.$ = new DoWhile(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-2]); 
break;
case 91:
 this.$ = new If(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1], $$[$0]); 
break;
case 92: case 93:
 this.$ = $$[$0] 
break;
case 94:
 this.$ = null
break;
case 95:
 this.$ = new SentenciasCiclos(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], Sentencias.BREAK, null); 
break;
case 96:
 this.$ = new SentenciasCiclos(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], Sentencias.CONTINUE, null); 
break;
case 97:
 this.$ = new SentenciasCiclos(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], Sentencias.RETURN, null); 
break;
case 98:
 this.$ = new SentenciasCiclos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], Sentencias.RETURN, $$[$0-1]); 
break;
case 99:
 this.$ = new Matematicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operaciones.SUMA); 
break;
case 100:
 this.$ = new Matematicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operaciones.RESTA); 
break;
case 101:
 this.$ = new Matematicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operaciones.MULTIPLICACION); 
break;
case 102:
 this.$ = new Matematicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operaciones.DIVISION); 
break;
case 103:
 this.$ = new Matematicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], new Primitivo(_$[$0-2].first_line, _$[$0-2].first_column, 1), Operaciones.INCREMENTO); 
break;
case 104:
 this.$ = new Matematicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], new Primitivo(_$[$0-2].first_line, _$[$0-2].first_column, 1), Operaciones.DECREMENTO); 
break;
case 105:
 this.$ = new Matematicos(_$[$0-1].first_line, _$[$0-1].first_column, new Primitivo(_$[$0-1].first_line, _$[$0-1].first_column, 0), $$[$0], Operaciones.NEGATIVO); 
break;
case 106:
 this.$ = new Logicos(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], $$[$0], Operadores.NOT); 
break;
case 107:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.MENORIGUAL); 
break;
case 108:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.MAYORIGUAL); 
break;
case 109:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.MENOR); 
break;
case 110:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.MAYOR); 
break;
case 111:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.IGUAL); 
break;
case 112:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.DIFERENTE); 
break;
case 113:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.AND); 
break;
case 114:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.OR); 
break;
case 115:
 this.$ = new Logicos(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], Operadores.XOR); 
break;
case 117:
 this.$ = new Parentesis(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 118: case 119: case 120: case 121:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0]); 
break;
case 122:
 this.$ = new MetodoDeclaracion(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4], $$[$0-2], [], false); 
break;
case 123:
 this.$ = new MetodoDeclaracion(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-5], $$[$0-3], $$[$0-1], false); 
break;
case 124:
 this.$ = new MetodoDeclaracion(_$[$0-2].first_line, _$[$0-2].first_column, "", $$[$0-2], [], false); 
break;
case 125:
 this.$ = new MetodoDeclaracion(_$[$0-3].first_line, _$[$0-3].first_column, "", $$[$0-3], $$[$0-1], false); 
break;
case 133: case 134:
 this.$ = new Comentarios(_$[$0].first_line, _$[$0].first_column, $$[$0]); 
break;
case 135:
 this.$ = new Declaracion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1]); 
break;
case 136:
 this.$ = new DeclaracionFor(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1]); 
break;
case 139:
 this.$ = new Subdeclaracion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 140:
 this.$ = new Subdeclaracion(_$[$0].first_line, _$[$0].first_column, $$[$0], null); 
break;
case 141:
 this.$ = new Asignacion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1]); 
break;
case 142:
 this.$ = new MetodoAsignacion(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-5], $$[$0-3], [], true); 
break;
case 143:
 this.$ = new MetodoAsignacion(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-6], $$[$0-4], $$[$0-2], true); 
break;
case 144:
 this.$ = new MetodoAsignacion(_$[$0-3].first_line, _$[$0-3].first_column, "", $$[$0-3], [], true); 
break;
case 145:
 this.$ = new MetodoAsignacion(_$[$0-4].first_line, _$[$0-4].first_column, "", $$[$0-4], $$[$0-2], true); 
break;
case 146:
 this.$ = new IncrementoDecremento(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], "+"); 
break;
case 147:
 this.$ = new IncrementoDecremento(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], "-"); 
break;
case 148:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2]); 
break;
case 149:
 this.$ = new Errores(_$[$0-1].first_line, _$[$0-1].first_column, "Error Sintactico", $$[$0-1]); 
break;
case 150: case 151:
 
break;
}
},
table: [{1:[2,2],2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,38:$V1,42:10,44:$V2,49:$V3,53:$V4,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va},{1:[3]},{2:$V0,5:[1,21],6:22,7:4,8:5,9:6,10:7,11:8,38:$V1,42:10,44:$V2,49:$V3,53:$V4,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va},o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),{39:$Vc,41:[1,24]},{40:$Vd,93:25,94:26},o($Ve,[2,133]),o($Ve,[2,134]),{33:[1,31],40:[1,32],43:[1,33],44:[1,30],53:[1,29],97:28},o($Vf,[2,150]),o($Vf,[2,151]),{40:[2,128]},{40:[2,129]},{40:[2,130]},{40:[2,131]},{40:[2,132]},{1:[2,1]},o($Vb,[2,3]),{40:[1,34]},{40:[1,35]},{53:[1,36],54:$Vg},o($Vh,[2,138]),o($Vh,[2,140],{95:[1,38]}),o($Vf,[2,149]),o($Vf,[2,152]),o($Vf,[2,153]),o($Vf,[2,154]),o($Vf,[2,155]),{98:[1,39]},{2:$V0,11:42,31:40,32:[1,41],44:$V2,53:$V4},{2:$V0,11:45,32:[1,44],34:43,44:$V2,53:$V4},o($Ve,[2,135]),{40:$Vd,94:46},{40:$Vi,43:$Vj,58:47,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{44:[1,56]},o($Vp,[2,74]),{2:$V0,7:61,9:60,10:62,11:65,12:57,13:59,14:63,15:64,33:[1,58],38:$Vq,40:$Vr,42:10,44:$V2,49:$V3,53:$V4,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va},o($Vp,[2,61]),o($Vb,[2,75]),{2:$V0,10:72,11:73,16:68,17:70,18:71,33:[1,69],38:$Vs,44:$V2,53:$V4,91:$V9,92:$Va},o($Vb,[2,64]),o($Vh,[2,137]),o($Vh,[2,139],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),{40:$Vi,43:$Vj,58:88,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:89,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},o($VG,[2,116]),{40:$Vi,43:$Vj,58:90,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},o($VG,[2,118]),o($VG,[2,119]),o($VG,[2,120]),o($VG,[2,121],{43:[1,92],85:[1,91]}),o($Vf,[2,156]),{2:$V0,7:61,9:60,10:62,11:65,13:94,14:63,15:64,33:[1,93],38:$Vq,40:$Vr,42:10,44:$V2,49:$V3,53:$V4,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va},o($Vp,[2,60]),o($VH,[2,11]),o($VH,[2,12]),o($VH,[2,13]),o($VH,[2,14]),o($VH,[2,15]),o($VH,[2,16]),o($VH,[2,17]),{39:$Vc,42:95,45:[1,96],47:[1,97],49:$V3,87:$V5,88:$V6,89:$V7,90:$V8},{43:[1,100],67:[1,101],68:[1,102],85:[1,99],95:[1,98]},{2:$V0,10:72,11:73,17:104,18:71,33:[1,103],38:$Vs,44:$V2,53:$V4,91:$V9,92:$Va},o($Vb,[2,63]),o($VI,[2,19]),o($VI,[2,20]),o($VI,[2,21]),o($VI,[2,22]),{42:105,45:[1,106],49:$V3,87:$V5,88:$V6,89:$V7,90:$V8},{40:$Vi,43:$Vj,58:107,67:[1,108],68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:109,68:[1,110],71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:111,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:112,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:113,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:114,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:115,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:116,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:117,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:118,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:119,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:120,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:121,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},o($VJ,[2,105],{69:$Vv,70:$Vw,80:$VF}),o([44,53,54],[2,106],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),{44:[1,122],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{40:[1,123]},{40:$Vi,43:$Vj,44:[1,124],81:126,82:$Vm,83:$Vn,84:$Vo,86:125},o($Vp,[2,59]),o($VH,[2,10]),{40:[1,127]},{40:[1,128]},{45:[1,129]},{40:$Vi,43:$Vj,58:130,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:[1,131]},{40:$Vi,43:$Vj,44:[1,132],81:126,82:$Vm,83:$Vn,84:$Vo,86:133},{67:[1,134]},{68:[1,135]},o($Vb,[2,62]),o($VI,[2,18]),{40:[1,136]},{40:[1,137]},o($VJ,[2,99],{69:$Vv,70:$Vw,80:$VF}),o($VG,[2,103]),o($VJ,[2,100],{69:$Vv,70:$Vw,80:$VF}),o($VG,[2,104],{81:50,58:88,40:$Vi,43:$Vj,71:$Vl,82:$Vm,83:$Vn,84:$Vo}),o($VK,[2,101],{80:$VF}),o($VK,[2,102],{80:$VF}),o($VL,[2,107],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,80:$VF}),o($VL,[2,108],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,80:$VF}),o($VL,[2,109],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,80:$VF}),o($VL,[2,110],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,80:$VF}),o($VM,[2,111],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,80:$VF}),o($VM,[2,112],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,80:$VF}),o([44,53,54,78,79],[2,113],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,80:$VF}),o([44,53,54,79],[2,114],{67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,80:$VF}),o($VG,[2,115]),o($VG,[2,117]),{43:[1,138]},o($VG,[2,124]),{44:[1,139],54:$VN},o($VO,[2,127]),{43:[1,141]},{43:[1,142]},{48:[1,143]},{53:[1,144],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{43:[1,145]},{53:[1,146]},{44:[1,147],54:$VN},{53:[1,148]},{53:[1,149]},{43:[1,150]},{43:[1,151]},{40:$Vi,43:$Vj,44:[1,152],81:126,82:$Vm,83:$Vn,84:$Vo,86:153},o($VG,[2,125]),{40:$Vi,43:$Vj,81:154,82:$Vm,83:$Vn,84:$Vo},{42:158,44:[1,155],46:156,49:$V3,55:157,87:$V5,88:$V6,89:$V7,90:$V8},{42:158,44:[1,159],46:160,49:$V3,55:157,87:$V5,88:$V6,89:$V7,90:$V8},{43:[1,161]},o($VP,[2,141]),{40:$Vi,43:$Vj,44:[1,162],81:126,82:$Vm,83:$Vn,84:$Vo,86:163},o($VP,[2,144]),{53:[1,164]},o($VP,[2,146]),o($VP,[2,147]),{42:158,44:[1,165],46:166,49:$V3,55:157,87:$V5,88:$V6,89:$V7,90:$V8},{42:158,44:[1,167],46:168,49:$V3,55:157,87:$V5,88:$V6,89:$V7,90:$V8},o($VG,[2,122]),{44:[1,169],54:$VN},o($VO,[2,126]),{2:$V0,11:172,32:$VQ,35:170,44:$V2,53:$V4},{44:[1,173],54:$VR},o($VO,[2,86]),{40:[1,175]},{2:$V0,11:172,32:$VQ,35:176,44:$V2,53:$V4},{44:[1,177],54:$VR},{49:[1,178]},{53:[1,179]},{44:[1,180],54:$VN},o($VP,[2,145]),{53:[1,181]},{44:[1,182],54:$VR},{53:[1,183]},{44:[1,184],54:$VR},o($VG,[2,123]),o($VH,[2,76]),{2:$V0,9:193,10:194,11:197,15:195,19:185,20:187,21:188,22:189,23:190,24:191,25:192,26:196,33:[1,186],40:$Vr,42:10,44:$V2,49:$V3,53:$V4,56:$VS,59:$VT,60:$VU,61:$VV,64:$VW,65:$VX,66:$VY,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va,96:$VZ},o($VH,[2,67]),{2:$V0,11:172,32:$VQ,35:206,44:$V2,53:$V4},{42:158,49:$V3,55:207,87:$V5,88:$V6,89:$V7,90:$V8},o($VO,[2,87]),o($VH,[2,77]),{2:$V0,11:172,32:$VQ,35:208,44:$V2,53:$V4},{50:[1,209]},o($VP,[2,142]),{53:[1,210]},o($VI,[2,81]),{53:[1,211]},o($VI,[2,82]),{53:[1,212]},{2:$V0,9:193,10:194,11:197,15:195,20:214,21:188,22:189,23:190,24:191,25:192,26:196,33:[1,213],40:$Vr,42:10,44:$V2,49:$V3,53:$V4,56:$VS,59:$VT,60:$VU,61:$VV,64:$VW,65:$VX,66:$VY,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va,96:$VZ},o($VH,[2,66]),o($V_,[2,24]),o($V_,[2,25]),o($V_,[2,26]),o($V_,[2,27]),o($V_,[2,28]),o($V_,[2,29]),o($V_,[2,30]),o($V_,[2,31]),o($V_,[2,32]),o($V_,[2,33]),o($V_,[2,34]),{43:[1,215]},{43:[1,216]},{43:[1,217]},{2:$V0,11:220,32:$V$,36:218,44:$V2,53:$V4},{43:[1,221]},{53:[1,222]},{53:[1,223]},{40:$Vi,43:$Vj,53:[1,224],58:225,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},o($VH,[2,78]),o($VO,[2,85]),o($VH,[2,79]),{51:[1,226]},o($VP,[2,143]),o($VI,[2,83]),o($VI,[2,84]),o($VH,[2,65]),o($V_,[2,23]),{40:$Vi,43:$Vj,58:227,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vi,43:$Vj,58:228,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{42:230,49:$V3,57:229,87:$V5,88:$V6,89:$V7,90:$V8},{59:[1,231]},{2:$V0,9:240,10:241,11:244,15:242,21:235,22:236,23:237,24:238,25:239,26:243,27:232,28:234,33:[1,233],40:$Vr,42:10,44:$V2,49:$V3,53:$V4,56:$VS,59:$VT,60:$VU,61:$VV,64:$VW,65:$VX,66:$VY,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va,96:$VZ},o($V_,[2,70]),{40:$Vi,43:$Vj,58:245,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},o($V_,[2,95]),o($V_,[2,96]),o($V_,[2,97]),{53:[1,246],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{52:[1,247]},{44:[1,248],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{44:[1,249],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{40:$Vi,43:$Vj,58:250,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},{40:$Vd,93:251,94:26},{43:[1,252]},{2:$V0,9:240,10:241,11:244,15:242,21:235,22:236,23:237,24:238,25:239,26:243,28:254,33:[1,253],40:$Vr,42:10,44:$V2,49:$V3,53:$V4,56:$VS,59:$VT,60:$VU,61:$VV,64:$VW,65:$VX,66:$VY,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va,96:$VZ},o($V_,[2,69]),o($V_,[2,36]),o($V_,[2,37]),o($V_,[2,38]),o($V_,[2,39]),o($V_,[2,40]),o($V_,[2,41]),o($V_,[2,42]),o($V_,[2,43]),o($V_,[2,44]),o($V_,[2,45]),o($V_,[2,46]),{44:[1,255],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},o($V_,[2,98]),{44:[1,256]},{53:[1,257]},{2:$V0,11:260,32:$V01,37:258,44:$V2,53:$V4},{53:[1,261],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{53:[1,262],54:$Vg},{40:$Vi,43:$Vj,58:263,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},o($V_,[2,68]),o($V_,[2,35]),{2:$V0,11:220,32:$V$,36:264,44:$V2,53:$V4},{2:$V0,11:172,32:$VQ,35:265,44:$V2,53:$V4},o($V_,[2,148]),o($V_,[2,94],{62:266,63:[1,267]}),{2:$V0,9:276,10:277,11:280,15:278,21:271,22:272,23:273,24:274,25:275,26:279,29:268,30:270,33:[1,269],40:$Vr,42:10,44:$V2,49:$V3,53:$V4,56:$VS,59:$VT,60:$VU,61:$VV,64:$VW,65:$VX,66:$VY,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va,96:$VZ},o($V11,[2,73]),{40:$Vi,43:$Vj,58:281,68:$Vk,71:$Vl,81:50,82:$Vm,83:$Vn,84:$Vo},o([40,43,68,71,82,83,84],[2,136]),{44:[1,282],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},o($V_,[2,89]),o($VH,[2,80]),o($V_,[2,91]),{2:$V0,11:260,22:284,32:$V01,37:283,44:$V2,53:$V4,61:$VV},{2:$V0,9:276,10:277,11:280,15:278,21:271,22:272,23:273,24:274,25:275,26:279,30:286,33:[1,285],40:$Vr,42:10,44:$V2,49:$V3,53:$V4,56:$VS,59:$VT,60:$VU,61:$VV,64:$VW,65:$VX,66:$VY,87:$V5,88:$V6,89:$V7,90:$V8,91:$V9,92:$Va,96:$VZ},o($V11,[2,72]),o($V_,[2,48]),o($V_,[2,49]),o($V_,[2,50]),o($V_,[2,51]),o($V_,[2,52]),o($V_,[2,53]),o($V_,[2,54]),o($V_,[2,55]),o($V_,[2,56]),o($V_,[2,57]),o($V_,[2,58]),{44:[1,287],67:$Vt,68:$Vu,69:$Vv,70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF},{53:[1,288]},o($V_,[2,92]),o($V_,[2,93]),o($V11,[2,71]),o($V_,[2,47]),{2:$V0,11:220,32:$V$,36:289,44:$V2,53:$V4},o($V_,[2,90]),o($V_,[2,88])],
defaultActions: {16:[2,128],17:[2,129],18:[2,130],19:[2,131],20:[2,132],21:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const { Print } = require('../build/Print')
	const { Primitivo } = require('../build/Primitivo')
	const { Matematicos, Operaciones } = require('../build/Matematicos')
	const { Logicos, Operadores } = require('../build/Logicos')
	const { Bloque } = require('../build/Bloque')
	const { If } = require('../build/If')
	const { For } = require('../build/For')
	const { DoWhile } = require('../build/DoWhile')
	const { While } = require('../build/While')
	const { Subdeclaracion } = require('../build/Subdeclaracion')
	const { Declaracion } = require('../build/Declaracion')
	const { DeclaracionFor } = require('../build/DeclaracionFor')
	const { Clase } = require('../build/Clase')
	const { Interfaz } = require('../build/Interfaz') 
	const { Comentarios } = require('../build/Comentarios') 
	const { Funciones } = require('../build/Funciones') 
	const { MetodoAsignacion } = require('../build/MetodoAsignacion') 
	const { MetodoDeclaracion } = require('../build/MetodoDeclaracion')
	const { Parametros } = require('../build/Parametros') 
	const { SentenciasCiclos, Sentencias } = require('../build/SentenciasCiclos')
	const { DeclaracionFunciones } = require('../build/DeclaracionFunciones')
	const { Asignacion } = require('../build/Asignacion')
	const { IncrementoDecremento } = require('../build/IncrementoDecremento') 
	const { Parentesis } = require('../build/Parentesis')
	const { Tokens } = require('../build/Tokens')
	const { Errores } = require('../build/Errores')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Espacio en Blanco
break;
case 1: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Comentario_UniLinea", yy_.yytext); return 92; 
break;
case 2: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Comentario_MultiLinea", yy_.yytext); return 91; 
break;
case 3: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 96; 
break;
case 4: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Llave_Apertura", yy_.yytext); return 32; 
break;
case 5: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Llave_Cierre", yy_.yytext); return 33; 
break;
case 6: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Parentesis_Apertura", yy_.yytext); return 43; 
break;
case 7: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Parentesis_Cierre", yy_.yytext); return 44; 
break;
case 8: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Corchete_Apertura", yy_.yytext); return 50; 
break;
case 9: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Corchete_Apertura", yy_.yytext); return 51; 
break;
case 10: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Coma", yy_.yytext); return 54; 
break;
case 11: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Punto", yy_.yytext); return 85; 
break;
case 12: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_PuntoYComa", yy_.yytext); return 53; 
break;
case 13: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_DosPuntos", yy_.yytext); return ':'; 
break;
case 14: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_MayorIgual", yy_.yytext); return 73; 
break;
case 15: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_MenorIgual", yy_.yytext); return 72; 
break;
case 16: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_IgualA", yy_.yytext); return 76; 
break;
case 17: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_DiferenteDe", yy_.yytext); return 77; 
break;
case 18: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Menor", yy_.yytext); return 74; 
break;
case 19: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Mayor", yy_.yytext); return 75; 
break;
case 20: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Igual", yy_.yytext); return 95; 
break;
case 21: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_And", yy_.yytext); return 78; 
break;
case 22: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Or", yy_.yytext); return 79; 
break;
case 23: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Negacion", yy_.yytext); return '|'; 
break;
case 24: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Xor", yy_.yytext); return 80; 
break;
case 25: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Mas", yy_.yytext); return 67; 
break;
case 26: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Menos", yy_.yytext); return 68; 
break;
case 27: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Por", yy_.yytext); return 69; 
break;
case 28: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Simbolo_Dividido", yy_.yytext); return 70; 
break;
case 29: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 38; 
break;
case 30: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 47; 
break;
case 31: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 39; 
break;
case 32: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 41; 
break;
case 33: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 45; 
break;
case 34: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 56; 
break;
case 35: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 60; 
break;
case 36: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 59; 
break;
case 37: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 61; 
break;
case 38: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 63; 
break;
case 39: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 64; 
break;
case 40: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 65; 
break;
case 41: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 66; 
break;
case 42: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 48; 
break;
case 43: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 52; 
break;
case 44: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 87; 
break;
case 45: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 88; 
break;
case 46: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 89; 
break;
case 47: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 49; 
break;
case 48: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 90; 
break;
case 49: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Palabra_Reservada", yy_.yytext); return 84; 
break;
case 50: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Cadena_De_Texto", yy_.yytext); return 83; 
break;
case 51: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Numero", yy_.yytext); return 82; 
break;
case 52: $$ = new Tokens(yy_.yylloc.first_line, yy_.yylloc.first_column, "Identificador", yy_.yytext); return 40; 
break;
case 53:return 5
break;
case 54: $$ = new Errores(yy_.yylloc.first_line, yy_.yylloc.first_column, "Error Lexico", yy_.yytext); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/\*][^*]*[*]+)*[/])/,/^(?:(System\.out\.println|System\.out\.print\b))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:public\b)/,/^(?:static\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:args\b)/,/^(?:int\b)/,/^(?:(boolean|bool\b))/,/^(?:double\b)/,/^(?:(String|string\b))/,/^(?:char\b)/,/^(?:(true|false\b))/,/^(?:(("([^"])*")|('([^'])*')))/,/^(?:(([0-9]+\b)(\.([0-9]+\b))?\b))/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_ñÑ]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = AnalizadorGramatica;
exports.Parser = AnalizadorGramatica.Parser;
exports.parse = function () { return AnalizadorGramatica.parse.apply(AnalizadorGramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}